// Generated by CoffeeScript 2.7.0
//#############################################################################
//region debug
var createResonableJSON, log, mapToObject, olog;

import {
  createLogFunctions
} from "thingy-debug";

({log, olog} = createLogFunctions("mainprocessmodule"));

import papa from "papaparse";

import pathModule from "path";

import fs from "fs";

import * as js2xml from "js2xmlparser";

import * as cfg from "./configmodule.js";

//#############################################################################
export var execute = function(e) {
  var csvString, inputPath, outputPath, result, resultJSON, resultXML;
  log("execute");
  olog(e);
  inputPath = pathModule.resolve(e.inputFile);
  if (e.outputFile != null) {
    outputPath = pathModule.resolve(e.outputPath);
  } else {
    outputPath = inputPath + ".xml";
  }
  csvString = fs.readFileSync(inputPath, "utf8");
  // log csvString
  result = papa.parse(csvString);
  // olog result.data
  resultJSON = createResonableJSON(result.data);
  olog(resultJSON);
  resultXML = js2xml.parse("krakenTransactions", resultJSON);
  olog(resultXML);
  fs.writeFileSync(outputPath, resultXML);
};

createResonableJSON = function(data) {
  var d, head, i, len, obj, result;
  log("createResonableJSON");
  //#TODO structure data to reasonable json
  // olog data
  head = data.shift();
  // olog head
  result = {
    transaction: []
  };
  for (i = 0, len = data.length; i < len; i++) {
    d = data[i];
    obj = mapToObject(head, d);
    if (obj != null) {
      result.transaction.push(obj);
    }
  }
  return result;
};

mapToObject = function(head, data) {
  var el, i, idx, len, obj;
  if (head.length !== data.length) {
    return null;
  }
  obj = {};
  for (idx = i = 0, len = head.length; i < len; idx = ++i) {
    el = head[idx];
    obj[el] = data[idx];
  }
  return obj;
};
